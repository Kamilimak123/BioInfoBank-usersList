{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","re_email","RegExp","re_ip","handleChange","event","inputState","isValid","formHelperText","name","target","value","checkNickname","checkEmail","checkIP_address","setState","prevState","user","objectSpread","defineProperty","formStates","formHelpers","checkForm","handleSubmit","continue_Submit","nickname","state","nick","email","IP_address","ip_address","joindate","Date","i","usersData","length","usersTempList","concat","preventDefault","deleteAllButton","bind","assertThisInitialized","deleteAllYes","deleteAllNo","buttonDisabled","showDeleteAll","openModal","test","checkIfEmpty","_this2","react_default","a","createElement","style","maxWidth","className","onSubmit","FormControl","error","id","InputLabel","htmlFor","Input","aria-describedby","type","onChange","FormHelperText","Button","variant","disabled","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","color","onClick","dist_default","editable","onRowDelete","oldData","Promise","resolve","setTimeout","data","splice","indexOf","columns","title","field","display","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a3e3491.chunk.js","sourcesContent":["import React from 'react';\nimport MaterialTable from 'material-table';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport './App.css';\n\n\n\n// TODO:\n// Formularz dodania użytkownika: (OK)\n// Nickname, Email, IP address (OK)\n// Walidacja Emailu i adresu IP (OK)\n// Przycisk Submit wygaszony, jeśli walidacja nie przeszła (OK)\n// Operacja zablokowana, jeżeli istnieje użytkownik o takim nicku lub emailu (OK)\n//\n// Przycisk usuwania użytkownika z tabeli (OK)\n// Przycisk usuwania całej listy (widoczny, gdy lista nie jest pusta) (OK)\n// Potwierdzenie usuwania (OK)\n// Popupy informujące, dlaczego użytkownika nie można dodać (OK)\n// Sortowanie użytkowników po nicku, emailu lub dacie (OK)\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.deleteAllButton = this.deleteAllButton.bind(this);\n    this.deleteAllYes = this.deleteAllYes.bind(this);\n    this.deleteAllNo = this.deleteAllNo.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      usersData: [],\n      user: {\n        nick: '',\n        email: '',\n        ip_address: '',\n        joindate: ''\n      },\n\n      formStates: {\n        nick: true,\n        email: true,\n        ip_address: true,\n      },\n\n      formHelpers: {\n        nick: 'e.g: Nickname',\n        email: 'e.g: address@mail.com',\n        ip_address: 'e.g: 192.168.1.1'\n      },\n      buttonDisabled: true,\n      showDeleteAll: false,\n      openModal: false\n    };\n\n  };\n\n  re_email = new RegExp(\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\");\n  re_ip = new RegExp(\"^(?:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(\\.(?!$)|$)){4}$\");\n\n  deleteAllButton() {\n    this.setState({\n      openModal: true\n    });\n  }\n\n  deleteAllYes() {\n    this.setState({\n      openModal: false,\n      usersData: []\n    });\n  }\n\n  deleteAllNo() {\n    this.setState({\n      openModal: false,\n    });\n  }\n\n  checkNickname(nick) {\n    if (nick.length < 3) {\n      return { isValid: false, formHelperText: \"Nickname too short (min 3 characters).\" }\n    } else {\n      return { isValid: true, formHelperText: \"Nickname OK.\" }\n    }\n  }\n\n  checkEmail(email) {\n    if (this.re_email.test(email)) {\n      return { isValid: true, formHelperText: \"Email OK.\" }\n    } else {\n      return { isValid: false, formHelperText: \"Invalid email format.\" }\n    }\n  }\n\n  checkIP_address(ip_address) {\n    if (this.re_ip.test(ip_address)) {\n      return { isValid: true, formHelperText: \"IP address OK.\" }\n    } else {\n      return { isValid: false, formHelperText: \"Invalid IP address format.\" }\n    }\n  }\n\n  handleChange = (event) => {\n    var inputState = {\n      isValid: false,\n      formHelperText: \"\"\n    }\n\n    const name = event.target.name;\n    const value = event.target.value;\n\n    if (event.target.name === \"nick\") {\n      inputState = this.checkNickname(event.target.value);\n    }\n\n    if (event.target.name === \"email\") {\n      inputState = this.checkEmail(event.target.value);\n    }\n\n    if (event.target.name === \"ip_address\") {\n      inputState = this.checkIP_address(event.target.value);\n    }\n\n    this.setState(prevState => {\n      return {\n        user: { ...prevState.user, [name]: value },\n        formStates: { ...prevState.formStates, [name]: inputState.isValid },\n        formHelpers: { ...prevState.formHelpers, [name]: inputState.formHelperText }\n      };\n    });\n    this.checkForm();\n\n  }\n\n  checkIfEmpty() {\n    if (this.state.user.nick === \"\") return false;\n    if (this.state.user.email === \"\") return false;\n    if (this.state.user.ip_address === \"\") return false;\n    return true;\n  }\n\n  checkForm() {\n    if (this.checkIfEmpty() == false) return false;\n    if (this.state.formStates.nick && this.state.formStates.email && this.state.formStates.ip_address) {\n      if (this.state.buttonDisabled == true) {\n        this.setState({\n          buttonDisabled: false\n        });\n      }\n    }\n    else {\n      if (this.state.buttonDisabled == false) {\n        this.setState({\n          buttonDisabled: true\n        });\n      }\n    }\n  }\n\n  handleSubmit = (event) => {\n    var continue_Submit = true;\n    const user = {\n      nickname: this.state.user.nick,\n      email: this.state.user.email,\n      IP_address: this.state.user.ip_address,\n      joindate: new Date()\n    }\n    for (var i = 0; i < this.state.usersData.length; i++) {\n      if (this.state.usersData[i].nickname == user.nickname) {\n        this.setState(prevState => {\n          return {\n            formStates: { ...prevState.formStates, nick: false },\n            formHelpers: { ...prevState.formHelpers, nick: \"This user already exists.\" }\n          };\n        });\n        continue_Submit = false;\n      }\n      if (this.state.usersData[i].email == user.email) {\n        this.setState(prevState => {\n          return {\n            formStates: { ...prevState.formStates, email: false },\n            formHelpers: { ...prevState.formHelpers, email: \"This email is already used.\" }\n          };\n        });\n        continue_Submit = false;\n      }\n    }\n\n    if (continue_Submit == true) {\n      const usersTempList = this.state.usersData.concat(user)\n      this.setState({\n        usersData: usersTempList\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  componentDidUpdate() {\n    if (this.state.usersData.length > 0) {\n      if (this.state.showDeleteAll == false) {\n        this.setState({\n          showDeleteAll: true\n        });\n      }\n    } else {\n      if (this.state.showDeleteAll == true) {\n        this.setState({\n          showDeleteAll: false\n        });\n      }\n    }\n    this.checkForm();\n  }\n\n  render() {\n    return (\n\n      <div style={{ maxWidth: '100%' }}>\n        <div>\n          <h2 className=\"header\">Crypto Users</h2>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"formInput\">\n            <FormControl error={!this.state.formStates.nick} id=\"nick-control\" >\n              <InputLabel htmlFor=\"nick-input\">Nickname</InputLabel>\n              <Input id=\"nick-input\" aria-describedby=\"nick-helper-text\" type=\"text\" onChange={this.handleChange} name=\"nick\" />\n              <FormHelperText id=\"nick-helper-text\">{this.state.formHelpers.nick}</FormHelperText>\n            </FormControl>\n          </div>\n          <div className=\"formInput\">\n            <FormControl error={!this.state.formStates.email} id=\"email-control\" >\n              <InputLabel htmlFor=\"email-input\">Email address</InputLabel>\n              <Input id=\"email-input\" aria-describedby=\"email-helper-text\" type=\"email\" onChange={this.handleChange} name=\"email\" />\n              <FormHelperText id=\"email-helper-text\">{this.state.formHelpers.email}</FormHelperText>\n            </FormControl>\n          </div>\n          <div className=\"formInput\">\n            <FormControl error={!this.state.formStates.ip_address} id=\"ip_address-control\" >\n              <InputLabel htmlFor=\"ip_address-input\">IP address</InputLabel>\n              <Input id=\"ip_address-input\" aria-describedby=\"ip_address-helper-text\" type=\"text\" onChange={this.handleChange} name=\"ip_address\" />\n              <FormHelperText id=\"ip_address-helper-text\">{this.state.formHelpers.ip_address}</FormHelperText>\n            </FormControl>\n          </div>\n\n          <div>\n            <Button variant=\"contained\" disabled={this.state.buttonDisabled} type=\"submit\"> Add User </Button>\n          </div>\n\n        </form>\n\n        <Dialog\n          open={this.state.openModal}\n          onClose={this.deleteAllNo}\n        >\n          <div>\n            <DialogTitle id=\"alert-dialog-title\">{\"Delete all users?\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                Are you sure you want to delete all users from the list?\n          </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button variant=\"contained\" color=\"primary\" onClick={this.deleteAllYes}>Yes</Button>\n              <Button variant=\"contained\" color=\"secondary\" onClick={this.deleteAllNo}>No</Button>\n            </DialogActions>\n          </div>\n        </Dialog>\n\n        <MaterialTable\n          editable={\n            {\n              onRowDelete: oldData =>\n                new Promise(resolve => {\n                  setTimeout(() => {\n                    resolve();\n                    const data = this.state.usersData;\n                    data.splice(data.indexOf(oldData), 1);\n                    this.setState({ usersData: data });\n                    this.checkForm(true);\n                  }, 200);\n                }),\n            }\n          }\n          columns={[\n            { title: 'Nickname', field: 'nickname' },\n            { title: 'Email', field: 'email' },\n            { title: 'IP address', field: 'IP_address' },\n            { title: 'Date', field: 'joindate', type: 'datetime' }\n          ]}\n          data={this.state.usersData}\n          title={<div> Users <Button style={{ display: this.state.showDeleteAll ? 'inline' : 'none' }} variant=\"contained\" color=\"secondary\" id=\"deleteAll_button\" onClick={this.deleteAllButton}> Delete All </Button>\n          </div>}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}